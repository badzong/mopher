# Makefile

DIST?=			mopher
VERSION?=		0.5.3


# autolist
#
#	track output by autotools and configure
#
AUTOLIST+=		autom4te.cache
AUTOLIST+=		config.h
AUTOLIST+=		config.log
AUTOLIST+=		config.status
AUTOLIST+=		config/Makefile
AUTOLIST+=		configure
AUTOLIST+=		make/mk.common
AUTOLIST+=		man/Makefile
AUTOLIST+=		src/Makefile
AUTOLIST+=		src/modules/Makefile
OUT+=			$(AUTOLIST)


# distribution
#
#	create distribution tarball
#	generate configure script
#
DISTLIST+=		CHANGES
DISTLIST+=		LICENSE
DISTLIST+=		Makefile
DISTLIST+=		README
DISTLIST+=		config
DISTLIST+=		config.h.in
DISTLIST+=		configure
DISTLIST+=		make
DISTLIST+=		man
DISTLIST+=		src

DISTDIR?=		$(DIST)-$(VERSION)
DISTPKG?=		$(DISTDIR).tar.gz

dist: man-mdate
dist: $(DISTPKG)

$(DISTPKG): $(DISTDIR)
	tar czf $@ $> $^
OUT+=	$(DISTPKG)

$(DISTDIR): $(DISTLIST)
	mkdir $@
	cp -PRp $> $^ $@
OUT+=	$(DISTDIR)

configure: configure.ac
	DIST=$(DIST) VERSION=$(VERSION) aclocal
	DIST=$(DIST) VERSION=$(VERSION) autoconf
OUT+=	configure


# regdom
#
#	download and generate regdom tests
#	download and generate regdom rules
#
regdom: src/regdom_test.c
regdom: config/effective_tld_names.dat

regdom_test.dat:
	p=http://hg.mozilla.org/mozilla-central/raw-file/tip/netwerk/test/unit/data; \
	wget -O- $$p/test_psl.txt >$@
OUT+=	regdom_test.dat

src/regdom_test.c: regdom_test.dat
	echo "/* Generated file, see make/mk.admin for details. */" >$@
	sed "s/checkPublicSuffix(\(.*\));/{\1, 0},/; \
		s/null/NULL/g; s/'/\"/g;" $> $^ >>$@

config/effective_tld_names.dat:
	p=http://hg.mozilla.org/mozilla-central/raw-file/tip/netwerk/dns; \
	wget -O- $$p/effective_tld_names.dat >$@
.PHONY:	config/effective_tld_names.dat


# manuals
#
#	download and build mandoc
#	generate html pages from man pages
#	generate README from mopher(7)
#	update modification dates in man pages
#
MANDOC?=	mdocml-1.13.2
MANDOC_SHA1?=	0d3c4e72214f73ee81c02e9b8863db0bc8f85aaf

$(MANDOC).tar.gz:
	wget -O- http://mdocml.bsd.lv/snapshots/$@ >$@
	@case $$(sha1sum $@) in $(MANDOC_SHA1)*) :;; \
		*) echo $@: checksum mismatch; rm $@; exit 1;; esac
OUT+=	$(MANDOC).tar.gz

$(MANDOC): $(MANDOC).tar.gz
	tar xzf $> $^
OUT+=	$(MANDOC)

$(MANDOC)/.done: $(MANDOC)
	(cd $> $^ && ./configure && $(MAKE)) || exit 1; \
	: >$@ # success

man-html: $(MANDOC)/.done
	@echo $@: generating html pages; \
	set -e; \
	mkdir -p $@; \
	cp $(MANDOC)/example.style.css $@/style.css; \
	echo '/* mopher style */'		>>$@/style.css; \
	echo 'div.mandoc { width: 77ex; }'	>>$@/style.css; \
	echo 'div.mandoc { min-width: 77ex; }'	>>$@/style.css; \
	echo 'div.mandoc h1 {'			>>$@/style.css; \
	echo 'font-size: 150%;'			>>$@/style.css; \
	echo 'padding-left: 0.5ex; }'		>>$@/style.css; \
	echo 'table.list {'			>>$@/style.css; \
	echo 'padding-top: 1.5ex; }'		>>$@/style.css; \
	for i in man/$(DIST)*.[0-9].in; do \
		out=$@/$${i##*/}; \
		out=$${out%.in}.html; \
		sed -e 's|@PROGRAM_PATH@|/usr/sbin|g' \
		    -e 's|@CONFIG_PATH@|/etc/${DIST}|g' \
		    -e 's|@MODULE_PATH@|/usr/lib/${DIST}|g' \
		    -e 's|@PACKAGE_STRING@|${DIST} ${VERSION}|g' $$i | \
			$(MANDOC)/mandoc -mdoc -Thtml \
				-Oman=%N.%S.html,style=style.css >$$out; \
	done
OUT+=	man-html
.PHONY:	man-html

README: man/mopher.7.in
	groff -mdoc -Tascii $> $^ | col -bx | \
		sed ":a;/^FILES\$$/{:b;N;/\n[A-Z]/!bb; \
			s/.*\n//;ba};1d;\$$d;" >$@

man-mdate: # skip silently if git is not available
	@git --version >/dev/null 2>&1 || exit 0; \
	echo $@: updating modification dates; \
	set -e; \
	for i in man/$(DIST)*.[0-9].in; do \
		temp=$$i-mdate; \
		stat=$$(git log -1 -p "$$i"); \
		case $$stat in *+.Dd*) break;; esac; \
		date=$$(git log -1 --format="%at" "$$i"); \
		date=$$(date -d @$$date "+%B %e, %Y"); \
		sed "s/^\.Dd .*/.Dd $$date/" "$$i" >"$$temp"; \
		mv "$$temp" "$$i"; \
	done


# gitignore
#
#	generate .gitignore from all OUT content
#
.gitignore:
	echo "# Generated file, see make/mk.admin for details." >$@
	for i in $(OUT); do \
		echo "$$i"; done >>$@
	for i in $(SUBDIR); do \
		(cd $$i && $(MAKE) ignore) | \
			sed -n "s,^IGNORE: ,$$i/,p" >>$@; done
.PHONY:	.gitignore


# distclean
#
#	remove OUT content
#
distclean:
	-rm -rf $(OUT)
